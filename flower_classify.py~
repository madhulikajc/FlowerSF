import numpy as np
import h5py
import time
import os
from PIL import Image
#import matplotlib.pyplot as plt

RES = 20
NUM_PIX = RES * RES
RGB_LEN = NUM_PIX * 3
NUM_FLOWER_CLASSES = 4

# Start with a 2 layer model, 1st layer Linear + ReLu, and second Linear + Sigmoid
# Eventually expand to an L layer model, then
# Test different #layers for improvement to final solution (bias and variance)

def load_data():
# Later add test set also to this function
    """
    Loads all the image files along with labels into training set
    Classified and labeled based on directory name = flower name
    
    Returns:
    train_set_x -- training set x with R, G, B values in order (flattened)
    train_set_y -- training set y with labels 0, 1, 2, 3, 4 in Softmax (00000, 01000, 00100, 00010, 00001)
        0 = no flower image (random)
        1 = agapanthus
        2 = ca_poppy
        3 = nasturtium
        4 = alyssum
    """

    n_x = RGB_LEN
    n_y = NUM_FLOWER_CLASSES + 1   # One more class for no flower present, all 0's

## Agapanthus

    current_dir = "../Data/square_images/01_agapanthus"
    m = len([filename for filename in os.listdir(current_dir) if filename.endswith("JPG") or filename.endswith("jpeg")])
    print("Number of training examples in", current_dir, "is", m)

    curr_training_set_x = np.zeros((n_x, m)) # Array training examples as columns
    curr_training_set_y = np.zeros((n_y, m)) # n_y is the number of output classes

    # use enumerate and i
    for filename in os.listdir(current_dir):
        if filename.endswith("JPG") or filename.endswith("jpeg"):
            # Read image into an array as a flattened RGB values
            # Resize into a 20 x 20 array for now - later on much more
            curr_training_set_x[:, i] = 
            curr_training_set_y[1, i] = 1


    train_set_x = curr_training_set_x
    train_set_y = curr_training_set_y



## California Poppy

    current_dir = "../Data/square_images/02_california_poppy"
    m = len([filename for filename in os.listdir(current_dir) if filename.endswith("JPG") or filename.endswith("jpeg")])
    print("Number of training examples in", current_dir, "is", m)

    curr_training_set_x = np.zeros((n_x, m)) # Array training examples as columns
    curr_training_set_y = np.zeros((n_y, m)) # n_y is the number of output classes

    train_set_x = # concatenate training_set and the new curr_training_set_x


    return train_set_x, train_set_y




load_data()
